apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.26.1 (a9d05d509)
  creationTimestamp: null
  labels:
    io.kompose.service: webserver
  name: airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: webserver
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.26.1 (a9d05d509)
      creationTimestamp: null
      labels:
        io.kompose.service: webserver
    spec:
      serviceAccountName: apache-airflow-scheduler
      containers:
        - env:
            - name: EXECUTOR
              value: CeleryExecutor
            - name: FERNET_KEY
              value: 46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            - name: LOAD_EX
              value: "n"
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: sql_alchemy_conn
            - name: AIRFLOW__CORE__EXECUTOR
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: executor
            - name: AIRFLOW__CELERY__BROKER_URL
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: redis_conn_id
          image: docker.io/thescomcontainers/airflow:2.1.2
          name: scheduler
          command: [
              "sh",
              "-c",
              "airflow list_users || (airflow db init
              && airflow scheduler)",
            ]
          resources: {}
          volumeMounts:
            - name: dags-pv
              mountPath: /usr/local/airflow/dags
            - name: logs-pv
              mountPath: /usr/local/airflow/logs
            - name: spark-scripts-pv
              mountPath: /usr/local/airflow/spark-scripts
            - name: downloads-pv
              mountPath: /usr/local/airflow/downloads
            - name: plugins-pv
              mountPath: /usr/local/airflow/plugins
        - env:
            - name: EXECUTOR
              value: CeleryExecutor
            - name: FERNET_KEY
              value: 46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            - name: LOAD_EX
              value: "n"
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: sql_alchemy_conn
            - name: AIRFLOW__CORE__EXECUTOR
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: executor
            - name: AIRFLOW__CELERY__RESULT_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: airflow_web_sql_alchemy_conn
            - name: AIRFLOW__CELERY__BROKER_URL
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: redis_conn_id
          image: docker.io/thescomcontainers/airflow:2.1.2
          name: webserver
          ports:
            - containerPort: 8080
          resources: {}
        - env:
            - name: EXECUTOR
              value: CeleryExecutor
            - name: FLOWER_PORT
              value: "5555"
            - name: AIRFLOW__CELERY__FLOWER_BASIC_AUTH
              value: admin:admin
            - name: FERNET_KEY
              value: 46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            - name: LOAD_EX
              value: "n"
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: sql_alchemy_conn
            - name: AIRFLOW__CORE__EXECUTOR
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: executor
            - name: AIRFLOW__CELERY__RESULT_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: airflow_web_sql_alchemy_conn
          image: docker.io/thescomcontainers/airflow:2.1.2
          command: ["sh", "-c", "airflow list_users || (airflow celery flower)"]
          name: flower
          ports:
            - containerPort: 5555
          resources: {}
        - env:
            - dags:
                gitSync:
                  enabled: true
                  repo: git@github.com:FD-Data-Engineering/sf-airflow.git
                  branch: test
                  subPath: "docker-compose"
                  sshKeySecret: airflow-ssh-secret
              extraSecrets:
                airflow-ssh-secret:
                  data: |
                    gitSshKey: 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUFzblpKeEF3NExRekpKYWsyYjdIUEVmNUc3dWhYd2FZK3hZNUZoYkF4Y2lkVWwrRm8vWWtuCmZZYTBRKzRkeThiWTc0T1pIK1dUbkV2WkxRWUZoK2lWRHBpYUMvTGxHSzh5QVFKYzl6MUdFQ3FQdnU3bnhlZEUya1JNejEKN1h4dlBsa044eHZTSnVLYzRBMitrVVNkY2NJV2JuTmJXbXZhOU55VllFeTFJQmIrMkpoeW1WVVVyZnZBQ05sa0ZvZlFoSApSZk1CQ29LRURXSnVqbmF0am1oSUNLYkxadGFXa2VFUmFyTkMwRldhWkZGVzJrVWVsOWMvam14eU5ibTVYdTVsY2hUOTdCCmVHQUtVN0Z1L1hNRHM0VGo4bkc3VDBibU5PeFJrNnMwZGE1ejFTcmFWNmdlYlh5SVpVd0xyMDMzZHlsWFdQMCtFTDN3dHUKejlqbjVRUHB0V3MybDJjdlZzV0FvVnVaQzdhV0JTdnBCS3UyU24vTmxsQzZJMmVQVklaaXBzVlFTaUxYZURIcVJpb3ZUYwpkS1JQWGptZHNaMUkrMkNEd1pBUklMdjFUQ25Gd09TZ0JDVXVSVGxqdVRDUkdKdmFJVWNtM3hEbG1qVkRkT2s3ZUtUUjBHCjJ2U1pIMXl2RWpybkFWenUzRndxQW9Ic3lPOFdHR1NRcjJ2OXJHR1hBQUFGa0d1cW9kUnJxcUhVQUFBQUIzTnphQzF5YzIKRUFBQUdCQUxKMlNjUU1PQzBNeVNXcE5tK3h6eEgrUnU3b1Y4R21Qc1dPUllXd01YSW5WSmZoYVAySkozMkd0RVB1SGN2RwoyTytEbVIvbGs1eEwyUzBHQllmb2xRNlltZ3Z5NVJpdk1nRUNYUGM5UmhBcWo3N3U1OFhuUk5wRVRNOWUxOGJ6NVpEZk1iCjBpYmluT0FOdnBGRW5YSENGbTV6VzFwcjJ2VGNsV0JNdFNBVy90aVljcGxWRkszN3dBalpaQmFIMElSMFh6QVFxQ2hBMWkKYm81MnJZNW9TQWlteTJiV2xwSGhFV3F6UXRCVm1tUlJWdHBGSHBmWFA0NXNjalc1dVY3dVpYSVUvZXdYaGdDbE94YnYxegpBN09FNC9KeHUwOUc1alRzVVpPck5IV3VjOVVxMmxlb0htMThpR1ZNQzY5TjkzY3BWMWo5UGhDOThMYnMvWTUrVUQ2YlZyCk5wZG5MMWJGZ0tGYm1RdTJsZ1VyNlFTcnRrcC96WlpRdWlObmoxU0dZcWJGVUVvaTEzZ3g2a1lxTDAzSFNrVDE0NW5iR2QKU1B0Z2c4R1FFU0M3OVV3cHhjRGtvQVFsTGtVNVk3a3drUmliMmlGSEp0OFE1Wm8xUTNUcE8zaWswZEJ0cjBtUjljcnhJNgo1d0ZjN3R4Y0tnS0I3TWp2Rmhoa2tLOXIvYXhobHdBQUFBTUJBQUVBQUFHQUVjb3kza1V0a0dnVzRSYzJJdnBCbnhTTzg1Ci9icDZVdjJyZXMvSCtzM2lsSGlJQmkyK3RCTVlVdEVSeDZnZWJIbDFDeUFmajd0dmZrcFZWVlZjLzhrK0RvY2twN1JmT28KODJyTjQ2T0xDVytFdHM3UDhlMTA4cUVlV3dta1R1UGZQWXJTUlgxYUovYXVKVDNkMU9LSm5sYklzNVR4RXpXWGRudUpyTQo3Mjc3WnBJRDBuOGx1WlkvOVdIZVZWU2lsNkdXSDQ5NWc5RzZ4MVF1Ulh0cnQwZXRCTnRHbXR4c3I5MW5vYUxmUnFtSmQzCkpmai83TGo3VC9KRmpFK0FTQk5SaE9tSGxwWHc5ampDL2NOcG9kcmozYU45c0VpcHVXOFI5SnBhTElvU2lvVXViMWh5dHkKTm5yMWZxb09DUE42MVhOTmRBbmIvQVY0eUFqbkpVcHZ0WkIxTWhBdUt4Y0JUdnNUUll6YXMxOHhDcmZSaHFJRnhJU3BXUgpUZ0VxcmlOdm53YW9aRzAxZUdUdDl1RS9EeUpZZjBhSUV0eTUwdEhKYjRNVVBrT0d4c2Y3TStBKzVNOUJlMkJ2M2xUcFhtCkFWU1hyOVJpb1ZSQ0VGNFlZYzB4REZsWXlmRlRuT0RBZzJ5TmdUSlpndHFYT1lwMElhVkplcE5jUVVJSVVLNHZRWkFBQUEKd0FwYmFwSjRoWEJkcitaLzJ0N3FWOW1kWDQ2NFBvaU5NdHZzSVJQOW1zbDBGaTNKamdlTm9YZGFBbnZoWnBublVTNzBEVgpVQ3VoNlBvQkQwb3JrN042bm9lblNyZXc4NzYwR0ZKKzk3NkQyT2g1OTgzRm9TQ0s1N0tLVVRwNTg5ekxJZ0FPU3hadUdaClQzNjh2dXdWVVpPb3Z1WkZJOHZ0NUo2cTdIZGZXTnJmY1pQemZVWVU4Ti9La0FKVERKa3NIMERLY2E2S2JJRDhXeGFpMnoKSlZZTVVMRHN5WFY4d1h3enVVQWFzMmVFQmN3SGZxOWM1dWViZ2xHdzBrTUdEUnRRQUFBTUVBMWQ4S1p3dFRKcS9meG83NwpjYnF3aG1aQ3h5b2xCcGFGd0ZoODRpMHJCTm5NYzVKNWpHMGJOVWMwbGZFOUVPQ244UGFDS2JhVUtmdWtERVlPWSttVDYrCk9IRXVaVXgraUlNdE9MLzBLRmh6QVIwWDRtakpEMnlKZ1ZqcEcvZVdhKzhXelF2Um5IcUlKWGc2M1d3VzYyV1BnRm9LZnMKNisrVmd5ZUYxRE82VkdrdVFNRGRuazlnZ0RlU05JNm5RN1YvOXFHQThKZXdQY3pTa1N4SFc1YnhDMDF3bk11RHVERzhmYwpCUzMwUHZTVHFUdVBDS2JqSkdabzlTQjcxaEhSaERBQUFBd1FEVm5hZjNHSzFxOU15OFpiMjNxYzNJNUNvZzljbG9BUUVsCkw4TmlxdHQramZiVGFaQUF0NVFiTW9KTDBHby8wRklacnNOOGRnT1dudHJWQkFPVDFXZzNvclhuZjNnMStiUFA2QVF4SzMKZmtiaFdYdTNHeUFTY0Ztd1hiWTk5U2hJMVF0TG1VNDE2Qys5cU9LaU1CZE1SS3M4cmY1TkQvTmpLNnZweHk1dm43ZkZVQQpEUWlVNFFlbXlrQ3FhYWFpMjhIdGpOVFMyK0VKVzZNVzBvSkJXZzcvV0F1Nk9ncFI0VFVUYUI5ZmN4Mkc3ekN2UTZmcnc1CmtocUZlWHhCdkx0aDBBQUFBWWNHZDFaM1ZzYkdGQVFTMU1VRlJRTFVodFYxcHRjRVZ0QVFJRAotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K' 

      volumes:
        - name: dags-pv
          persistentVolumeClaim:
            claimName: dags-pvc
        - name: logs-pv
          persistentVolumeClaim:
            claimName: logs-pvc
        - name: plugins-pv
          persistentVolumeClaim:
            claimName: plugins-pvc
        - name: downloads-pv
          persistentVolumeClaim:
            claimName: downloads-pvc
        - name: spark-scripts-pv
          persistentVolumeClaim:
            claimName: spark-scripts-pvc
status: {}