apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.26.1 (a9d05d509)
  creationTimestamp: null
  labels:
    io.kompose.service: scheduler
  name: scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: scheduler
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.26.1 (a9d05d509)
      creationTimestamp: null
      labels:
        io.kompose.service: scheduler
    spec:
      serviceAccountName: apache-airflow-scheduler
      containers:
        - env:
            - name: EXECUTOR
              value: CeleryExecutor
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  name: external-secret
                  key: FERNET_KEY
            - name: LOAD_EX
              value: "n"
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: external-secret
                  key: AIRFLOW__CORE__SQL_ALCHEMY_CONN
            - name: AIRFLOW__CORE__EXECUTOR
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: executor
            - name: AIRFLOW__CELERY__BROKER_URL
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: redis_conn_id
          image: docker.io/thescomcontainers/airflow:2.1.12
          name: scheduler
          command: ["sh", "-c", "airflow db init || (airflow scheduler)"]
          resources: {}
          volumeMounts:
            - name: dags-pv
              mountPath: /usr/local/airflow/dags
            - name: logs-pv
              mountPath: /usr/local/airflow/logs
            - name: spark-scripts-pv
              mountPath: /usr/local/airflow/spark-scripts
            - name: downloads-pv
              mountPath: /usr/local/airflow/downloads
            - name: plugins-pv
              mountPath: /usr/local/airflow/plugins
        - env:
            - name: EXECUTOR
              value: CeleryExecutor
            - name: FERNET_KEY
              valueFrom:
                secretKeyRef:
                  name: external-secret
                  key: FERNET_KEY
            - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: external-secret
                  key: AIRFLOW__CORE__SQL_ALCHEMY_CONN
            - name: AIRFLOW__CORE__EXECUTOR
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: executor
            - name: AIRFLOW__CELERY__RESULT_BACKEND
              valueFrom:
                secretKeyRef:
                  name: external-secret
                  key: AIRFLOW__CELERY__RESULT_BACKEND
            - name: AIRFLOW__CELERY__BROKER_URL
              valueFrom:
                configMapKeyRef:
                  name: apache-airflow-config
                  key: redis_conn_id
          image: docker.io/thescomcontainers/airflow:2.1.12
          name: worker
          ports:
            - containerPort: 8973
          command: ["sh", "-c", "airflow celery worker"]
          resources: {}
          volumeMounts:
            - name: dags-pv
              mountPath: /usr/local/airflow/dags
            - name: logs-pv
              mountPath: /usr/local/airflow/logs
            - name: spark-scripts-pv
              mountPath: /usr/local/airflow/spark-scripts
            - name: downloads-pv
              mountPath: /usr/local/airflow/downloads
            - name: plugins-pv
              mountPath: /usr/local/airflow/plugins
      volumes:
        - name: dags-pv
          persistentVolumeClaim:
            claimName: dags-pvc
        - name: logs-pv
          persistentVolumeClaim:
            claimName: logs-pvc
        - name: plugins-pv
          persistentVolumeClaim:
            claimName: plugins-pvc
        - name: downloads-pv
          persistentVolumeClaim:
            claimName: downloads-pvc
        - name: spark-scripts-pv
          persistentVolumeClaim:
            claimName: spark-scripts-pvc
status: {}
